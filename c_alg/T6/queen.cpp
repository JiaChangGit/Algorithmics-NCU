/*
我們的問題是：
在標準的西洋棋空棋盤 (8 x 8 棋盤) 上擺一個皇后，它要走幾步才能走到某個特定的格子？
Input:
輸入檔包含了好幾筆測試資料。每筆測試資料只有一行，其中含有整數 X1, Y1, X2 及 Y2 (1 ≤ X1, Y1, X2, Y2 ≤ 8)。
皇后從座標 (X1, Y1) 的格子開始，必須在座標 (X2, Y2) 的格子結束。在棋盤中的行由左至右編號為 1 到 8，列則由上至下編號為 1 到 8。
位於第 X 列第 Y 行的格子其座標為 (X, Y)。
輸入的結尾以四個由空白隔開的 0 來表示。

Output
對於每筆測試你的程式要印出一行，該行含有一個整數，表示皇后要走到新的位置至少需要幾步。

Sample input:
4 4 6 2
3 5 3 5
5 5 4 3
0 0 0 0

Sample output:
1
0
2
*/

#include <iostream>

using namespace std;

int main()
{
    int x1, y1, x2, y2;

    while (true)
    {
        cin >> x1 >> y1 >> x2 >> y2;
        if (x1 == 0 && x2 == 0 && y1 == 0 && y2 == 0)
            break;
        if (x1 == x2 && y1 == y2)
            cout << "0" << endl;
        else if ((y1 == y2) || (x1 == x2))
            cout << "1" << endl;
        else if (((x1 - x2) / (y1 - y2) == -1 || (x1 - x2) / (y1 - y2) == 1) && (x1 - x2) % (y1 - y2) == 0)
            cout << "1" << endl;
        else
            cout << "2" << endl;
    }
    return 0;
}

/*
我們要用水平距離與垂直距離來判定四種情況：

    1.在同一點，走 0 步：
      水平距離=垂直距離=0

    2.在斜線上，走 1 步：
      水平距離=垂直距離≠0

    3.在直線上，走 1 步：
      水平距離=0≠垂直距離 或 垂直距離=0≠水平距離

    4.以上三種都不是，走 2 步。
*/